From: Omer Akram <om26er@ubuntu.com>
Author: Philip Withnall <philip@tecnocode.co.uk>
Subject: Use the new idol_playlist_add_mrls() API to add multiple playlist entries.
Origin: http://git.mate.org/browse/idol/commit/?h=mate-2-32&id=75f0ef09df10d3a1d6a8a3063c3258b128bc2e08
Bug: https://bugs.mate.org/636686
Bug-Ubuntu: https://launchpad.net/bugs/659001

--- a/src/plugins/publish/idol-publish.c
+++ b/src/plugins/publish/idol-publish.c
@@ -412,6 +412,7 @@ idol_publish_plugin_load_playlist (IdolPublishPlugin   *self,
 
 	if (contents && g_key_file_load_from_data (keyfile, contents, length, G_KEY_FILE_NONE, &error)) {
 		gint i, n_entries;
+		GList *mrl_list = NULL;
 
 		/* returns zero in case of errors */
 		n_entries = g_key_file_get_integer (keyfile, "playlist", "NumberOfEntries", &error);
@@ -434,11 +435,15 @@ idol_publish_plugin_load_playlist (IdolPublishPlugin   *self,
 			g_free (key);
 
 			if (mrl)
-				idol_playlist_add_mrl (self->idol->playlist, mrl, title, FALSE, NULL, NULL, NULL);
+				mrl_list = g_list_prepend (mrl_list, idol_playlist_mrl_data_new (mrl, title));
 
 			g_free (title);
 			g_free (mrl);
 		}
+
+		/* Add the MRLs to the playlist asynchronously and in order */
+		if (mrl_list != NULL)
+			idol_playlist_add_mrls (self->priv->idol->playlist, g_list_reverse (mrl_list), FALSE, NULL, NULL, NULL);
 	}
 
 out:
diff --git a/src/idol-object.c b/src/idol-object.c
index badf169..dc17a45 100644
--- a/src/idol-object.c
+++ b/src/idol-object.c
@@ -2136,31 +2136,20 @@ idol_action_show_help (Idol *idol)
 	}
 }
 
-typedef struct {
-	gint add_mrl_complete;
-	Idol *idol;
-} DropFilesData;
-
 /* This is called in the main thread */
 static void
-idol_action_drop_files_finished (IdolPlaylist *playlist, GAsyncResult *result, DropFilesData *data)
+idol_action_drop_files_finished (IdolPlaylist *playlist, GAsyncResult *result, IdolObject *idol)
 {
-	/* When add_mrl_complete reaches 0, this is the last callback to occur and we can safely reconnect the playlist's changed signal (which was
-	 * disconnected below in idol_action_drop_files(). We can also free the data struct and generally clean up. */
-	if (g_atomic_int_dec_and_test (&(data->add_mrl_complete)) == TRUE) {
-		char *mrl, *subtitle;
+	char *mrl, *subtitle;
 
-		/* Reconnect the signal */
-		g_signal_connect (G_OBJECT (playlist), "changed", G_CALLBACK (playlist_changed_cb), data->idol);
-		mrl = idol_playlist_get_current_mrl (playlist, &subtitle);
-		idol_action_set_mrl_and_play (data->idol, mrl, subtitle);
-		g_free (mrl);
-		g_free (subtitle);
+	/* Reconnect the playlist's changed signal (which was disconnected below in idol_action_drop_files(). */
+	g_signal_connect (G_OBJECT (playlist), "changed", G_CALLBACK (playlist_changed_cb), idol);
+	mrl = idol_playlist_get_current_mrl (playlist, &subtitle);
+	idol_action_set_mrl_and_play (idol, mrl, subtitle);
+	g_free (mrl);
+	g_free (subtitle);
 
-		/* Free the data struct */
-		g_object_unref (data->idol);
-		g_slice_free (DropFilesData, data);
-	}
+	g_object_unref (idol);
 }
 
 static gboolean
@@ -2169,8 +2158,7 @@ idol_action_drop_files (Idol *idol, GtkSelectionData *data,
 {
 	char **list;
 	guint i, len;
-	DropFilesData *drop_files_data = NULL /* shut up gcc */;
-	GList *p, *file_list;
+	GList *p, *file_list, *mrl_list = NULL;
 	gboolean cleared = FALSE;
 
 	list = g_uri_list_extract_uris ((const char *) gtk_selection_data_get_data (data));
@@ -2210,18 +2198,11 @@ idol_action_drop_files (Idol *idol, GtkSelectionData *data,
 		g_signal_handlers_disconnect_by_func (G_OBJECT (idol->playlist), playlist_changed_cb, idol);
 		idol_playlist_clear (idol->playlist);
 		cleared = TRUE;
-
-		/* Allocate some shared memory to count how many add_mrl operations have completed (see the comment below).
-		 * It's freed in idol_action_drop_files_cb() once all add_mrl operations have finished. */
-		drop_files_data = g_slice_new (DropFilesData);
-		drop_files_data->add_mrl_complete = len;
-		drop_files_data->idol = g_object_ref (idol);
 	}
 
 	/* Add each MRL to the playlist asynchronously */
 	for (p = file_list; p != NULL; p = p->next) {
-		const char *filename;
-		char *title;
+		const char *filename, *title;
 
 		filename = p->data;
 		title = NULL;
@@ -2237,15 +2218,17 @@ idol_action_drop_files (Idol *idol, GtkSelectionData *data,
 			}
 		}
 
-		/* Add the MRL to the playlist. We need to reconnect playlist's "changed" signal once all of the add_mrl operations have completed,
-		 * so we use a piece of allocated memory shared between the async operations to count how many have completed.
-		 * If we haven't cleared the playlist, there's no need to do this. */
-		if (cleared == TRUE) {
-			idol_playlist_add_mrl (idol->playlist, filename, title, TRUE, NULL,
-			                        (GAsyncReadyCallback) idol_action_drop_files_finished, drop_files_data);
-		} else {
-			idol_playlist_add_mrl (idol->playlist, filename, title, TRUE, NULL, NULL, NULL);
-		}
+		/* Add the MRL data to the list of MRLs to add to the playlist */
+		mrl_list = g_list_prepend (mrl_list, idol_playlist_mrl_data_new (filename, title));
+	}
+
+	/* Add the MRLs to the playlist asynchronously and in order. We need to reconnect playlist's "changed" signal once all of the add-MRL
+	 * operations have completed. If we haven't cleared the playlist, there's no need to do this. */
+	if (mrl_list != NULL && cleared == TRUE) {
+		idol_playlist_add_mrls (idol->playlist, g_list_reverse (mrl_list), TRUE, NULL,
+		                         (GAsyncReadyCallback) idol_action_drop_files_finished, g_object_ref (idol));
+	} else if (mrl_list != NULL) {
+		idol_playlist_add_mrls (idol->playlist, g_list_reverse (mrl_list), TRUE, NULL, NULL, NULL);
 	}
 
 bail:
@@ -2736,6 +2719,7 @@ static gboolean
 idol_action_open_files_list (Idol *idol, GSList *list)
 {
 	GSList *l;
+	GList *mrl_list = NULL;
 	gboolean changed;
 	gboolean cleared;
 
@@ -2789,10 +2773,10 @@ idol_action_open_files_list (Idol *idol, GSList *list)
 				idol_action_load_media_device (idol, data);
 				changed = TRUE;
 			} else if (g_str_has_prefix (filename, "dvb:/") != FALSE) {
-				idol_playlist_add_mrl (idol->playlist, data, NULL, FALSE, NULL, NULL, NULL);
+				mrl_list = g_list_prepend (mrl_list, idol_playlist_mrl_data_new (data, NULL));
 				changed = TRUE;
 			} else {
-				idol_playlist_add_mrl (idol->playlist, filename, NULL, FALSE, NULL, NULL, NULL);
+				mrl_list = g_list_prepend (mrl_list, idol_playlist_mrl_data_new (filename, NULL));
 				changed = TRUE;
 			}
 		}
@@ -2800,6 +2784,10 @@ idol_action_open_files_list (Idol *idol, GSList *list)
 		g_free (filename);
 	}
 
+	/* Add the MRLs to the playlist asynchronously and in order */
+	if (mrl_list != NULL)
+		idol_playlist_add_mrls (idol->playlist, g_list_reverse (mrl_list), FALSE, NULL, NULL, NULL);
+
 	gdk_window_set_cursor (gtk_widget_get_window (idol->win), NULL);
 
 	/* ... and reconnect because we're nice people */
diff --git a/src/idol-playlist.c b/src/idol-playlist.c
index eac7ced..f893575 100644
--- a/src/idol-playlist.c
+++ b/src/idol-playlist.c
@@ -489,6 +489,8 @@ gtk_tree_selection_has_selected (GtkTreeSelection *selection)
 static void
 drop_finished_cb (IdolPlaylist *playlist, GAsyncResult *result, gpointer user_data)
 {
+	idol_playlist_add_mrls_finish (playlist, result, NULL);
+
 	/* Emit the "changed" signal once the last dropped MRL has been added to the playlist */
 	g_signal_emit (G_OBJECT (playlist),
 	               idol_playlist_table_signals[CHANGED], 0,
@@ -506,7 +508,7 @@ drop_cb (GtkWidget        *widget,
 	 IdolPlaylist    *playlist)
 {
 	char **list;
-	GList *p, *file_list;
+	GList *p, *file_list, *mrl_list = NULL;
 	guint i;
 	GdkDragAction action;
 
@@ -570,16 +572,16 @@ drop_cb (GtkWidget        *widget,
 			}
 		}
 
-		/* Add the MRL to the playlist asynchronously. If it's the last MRL, emit the "changed"
-		 * signal once we're done adding it */
-		if (p->next == NULL)
-			idol_playlist_add_mrl (playlist, filename, title, TRUE, NULL, (GAsyncReadyCallback) drop_finished_cb, NULL);
-		else
-			idol_playlist_add_mrl (playlist, filename, title, TRUE, NULL, NULL, NULL);
-
+		/* Add the MRL to the list of MRLs to be added to the playlist */
+		mrl_list = g_list_prepend (mrl_list, idol_playlist_mrl_data_new (filename, title));
 		g_free (filename);
 	}
 
+	/* Add all the MRLs to the playlist asynchronously, emitting the "changed" signal once we're done.
+	 * Note that this takes ownership of @mrl_list. */
+	if (mrl_list != NULL)
+		idol_playlist_add_mrls (playlist, g_list_reverse (mrl_list), TRUE, NULL, (GAsyncReadyCallback) drop_finished_cb, NULL);
+
 	g_strfreev (list);
 	g_list_free (file_list);
 	gtk_drag_finish (context, TRUE, FALSE, _time);
@@ -853,20 +855,22 @@ void
 idol_playlist_add_files (GtkWidget *widget, IdolPlaylist *playlist)
 {
 	GSList *filenames, *l;
+	GList *mrl_list = NULL;
 
 	filenames = idol_add_files (idol_playlist_get_toplevel (playlist), NULL);
 	if (filenames == NULL)
 		return;
 
 	for (l = filenames; l != NULL; l = l->next) {
-		char *mrl;
-
-		mrl = l->data;
-		idol_playlist_add_mrl (playlist, mrl, NULL, TRUE, NULL, NULL, NULL);
+		char *mrl = l->data;
+		mrl_list = g_list_prepend (mrl_list, idol_playlist_mrl_data_new (mrl, NULL));
 		g_free (mrl);
 	}
 
 	g_slist_free (filenames);
+
+	if (mrl_list != NULL)
+		idol_playlist_add_mrls (playlist, g_list_reverse (mrl_list), TRUE, NULL, NULL, NULL);
 }
 
 static void
diff --git a/src/idol-video-list.c b/src/idol-video-list.c
index f6fc828..bb01931 100644
--- a/src/idol-video-list.c
+++ b/src/idol-video-list.c
@@ -461,6 +461,7 @@ add_to_playlist_action_callback (GtkAction *action, IdolVideoList *self)
 	GtkTreePath *path;
 	GtkTreeIter iter;
 	gchar *mrl, *display_name;
+	GList *mrl_list = NULL;
 	GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (self));
 	GtkTreeModel *model = gtk_tree_view_get_model (GTK_TREE_VIEW (self));
 	GList *l = gtk_tree_selection_get_selected_rows (selection, NULL);
@@ -482,7 +483,7 @@ add_to_playlist_action_callback (GtkAction *action, IdolVideoList *self)
 			continue;
 		}
 
-		idol_playlist_add_mrl (playlist, mrl, display_name, TRUE, NULL, NULL, NULL);
+		mrl_list = g_list_prepend (mrl_list, idol_playlist_mrl_data_new (mrl, display_name));
 
 		g_free (mrl);
 		g_free (display_name);
@@ -490,6 +491,10 @@ add_to_playlist_action_callback (GtkAction *action, IdolVideoList *self)
 
 	g_list_foreach (l, (GFunc) gtk_tree_path_free, NULL);
 	g_list_free (l);
+
+	/* Asynchronously add all the MRLs to the playlist in order */
+	if (mrl_list != NULL)
+		idol_playlist_add_mrls (playlist, g_list_reverse (mrl_list), TRUE, NULL, NULL, NULL);
 }
 
 void
--
cgit v0.8.3.4
